name: CI/CD Pipeline for TaskReporter Backend

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-build:
    name: Lint, Format, and Build
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16" # Use the version your project needs

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Install ESLint and Prettier globally (optional but recommended)
      - name: Install ESLint and Prettier
        run: npm install eslint prettier --save-dev

      # Run lint and format
      - name: Lint and format
        run: npm run lint && npm run format

      # Docker build and push
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/taskreporter-backend:latest .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/taskreporter-backend:latest

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Initialize Docker Swarm
        run: |
          docker swarm init || echo "Swarm already initialized"

      - name: Pull and Deploy Docker Service
        run: |
          set -e

          IMAGE="renjithsamuel/taskreporter_backend:latest"
          SERVICE_NAME="taskreporter_app"
          TIMEOUT=60

          echo "Pulling the latest Docker image..."
          docker pull $IMAGE

          echo "Checking if service $SERVICE_NAME exists..."
          if docker service inspect $SERVICE_NAME > /dev/null 2>&1; then
            echo "Service exists. Updating..."
            docker service update --image $IMAGE --force $SERVICE_NAME
          else
            echo "Service does not exist. Creating a new service..."
            docker service create \
              --name $SERVICE_NAME \
              --replicas 3 \
              --publish 80:80 \
              $IMAGE
          fi

          echo "Waiting for service to stabilize (timeout: $TIMEOUT seconds)..."
          ELAPSED=0
          while ! docker service ps $SERVICE_NAME --filter "desired-state=running" | grep -q "Running"; do
            if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
              echo "Timeout reached. Service failed to stabilize."
              exit 1
            fi
            sleep 5
            ELAPSED=$((ELAPSED + 5))
            echo "Waiting for service to stabilize... ($ELAPSED/$TIMEOUT seconds)"
          done

          echo "Service stabilized successfully!"

      - name: Verify Docker Service Status
        run: docker service ls

      - name: Verify Docker Service Logs (Optional)
        run: docker service logs -f taskreporter_app
        if: always()